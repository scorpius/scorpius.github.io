<html>
 <head>
  <meta name="generator"
        content=
        "HTML Tidy for Windows (vers 14 February 2006), see www.w3.org">
  <meta http-equiv="Content-Type"
        content="text/html; charset=us-ascii">
  <meta name="description"
        content=
        "This is the home of the finest collection of ray-traced puzzles rendered with POV-Ray. You will see photo-realistic images of chinese throwing stars, telescopes, and golf balls . Also includes Rubik's Cube, The Snake Cube, Rubik's Revenge, The Pyraminx, The Tangram, and other related puzzles. Thumbnails allow quick previews. No modellers were used. Also has some BMRT images.">
  <meta name="distribution"
        content="global">
  <meta http-equiv="Page-Enter"
        content="blendTrans(Duration=0.6)">
  <title>
   How To Write Wings3D Plugins
  </title>
  <link rel="stylesheet"
        href="default.css"
        type="text/css">
  <link rel="shortcut icon"
        href="favicon.ico"
        type="image/x-icon">
  <link rel="icon"
        href="favicon.ico"
        type="image/x-icon">
 </head>
 <body bgcolor="#AAAAAA"
       topmargin="8"
       leftmargin="8">
  <div align="center">
   <table border="0"
          cellpadding="5"
          cellspacing="1"
          width="550"
          bgcolor="#000000">
    <tr>
     <td bgcolor="#C0C0C0">
      <div align="center">
       <center>
        <table border="0"
               cellpadding="10"
               cellspacing="0">
         <tr>
          <td>
          <p align="left" class="menu">
          <a class="top" href=bmrt.htm>Bmrt</a>
          <a class="top" href=povray.htm>PovRay</a>
          <a class="top" href=index.htm>Blender</a>
          <a class="top" href=anim.htm>Anim</a>
          <a class="top" href=info.htm>Info</a>
          <a class="top" href=photo.htm>Photo</a>
          </td>
         </tr>
        </table>
       </center>
      </div>

      <div align="center">
       <center>
        <table border="0"
               cellpadding="5"
               cellspacing="1"
               width="500"
               bgcolor="#000000">
         <tr>
          <td bgcolor="#A298A9">
           <p align="left"
              class="title">
            How To Write Wings3D Plugins<br>
            (for beginners)
           </p>
          </td>
         </tr>
        </table>
       </center>
      </div>

      <hr size="1"
          width="500">

      <div align="center">
       <center>
        <table border="0"
               bgcolor="#C0C0C0">
         <tr>
          <td width="500"
              bgcolor="#C0C0C0">
           <h3>
            Introduction
           </h3>

           <p align="left">
            This tutorial will attempt to teach you how to write your own
            <em>primitive-creating</em> plugins for Wings. First, an overview
            of the fundamental principles of what primitives are and how they
            are stored will be presented. Then, an explanation of how to apply
            these basic concepts in terms of Erlang and within the confines of
            the plugin api.
           </p>

           <h3>
            Coordinate System
           </h3>

           <p align="left">
            When writing a plugin for a particular modeling application, it is
            important to understand the orientation (or handedness) of the
            coordinate system. Knowing this from the beginning will prevent
            problems such as faces pointing in the wrong direction, having to
            manually rotate your model so it lines up with the floor, etc.
           </p>

           <p align="left"
              class="indent">
            For the record, Wings uses a right-handed coordinate system: the
            positive x, y, and z axes point to the right, up, and toward you,
            respectively. Upon startup (or when you reset the view) the
            camera's location is at position <span class="code">{1,1,1}</span>.
            This sounds simple, but it is easy to get confused. Do you know
            which way the axes are pointing when you are in top view (i.e.,
            viewing along the +y axis)? The answer: +x points to the right, and
            -z points to the top of the screen.
           </p>

           <h3>
            Geometric Primitive
           </h3>

           <p align="left">
            Primitives are planes, cubes, spheres, cylinders, etc. They can
            also be called meshes or objects. Primitives with flat surfaces
            (cubes, gears, icosahedrons) can be represented with 100% accuracy.
            But since Wings is a polygon modeler, primitives with curved
            surfaces (spheres, torus knots, teapots) must be represented
            parametrically. Therefore, a bivariate function is employed, and as
            the two parameters, <em>Ures</em> and <em>Vres</em>, are increased,
            the polygonal approximation approaches the true shape of the
            primitive.
           </p>

           <p align="left"
              class="indent">
            There are two main pieces of information needed in order to create
            a mesh: a vertices list and a faces list. In other applications,
            and possibly in future Wings versions, you may also need extra
            information such as the object's name, the uv coordinates, vertex
            normals, vertex colors, etc.
           </p>

           <h3>
            Vertex
           </h3>

           <p align="left">
            A vertex is an x,y,z triplet that specifies a location or point in
            a particular coordinate system. For example, the lower-left,
            front-vertex of a cube is usually located at <span class=
            "code">{-1.0, -1.0, +1.0}</span>.
           </p>

           <h3>
            Face
           </h3>

           <p align="left">
            A face, or polygon, is a finite, flat two-dimensional surface
            consisting of an arbitrary number of vertices. A minimum of three
            vertices are required to define a face (resulting in a triangle).
            There really is no maximum; a face with 3,000 vertices arranged in
            a circle will produce a very smooth disk. Faces may be convex
            (i.e., shaped like a hexagon) or concave (i.e., shaped like a the
            letter <em>U</em>).
           </p>

           <p align="left"
              class="indent">
            A face with two vertices is a one-dimensional edge. A face with one
            vertex is just a zero-dimensional point. Some applications allow
            such faces and can they can prove to be very useful to render
            hair/fur and for particle effects. Wings, however, has a minimum of
            three verts per face.
           </p>

           <h3>
            Mesh
           </h3>

           <p align="left">
            A mesh is simply a group of polygons arranged in a way that forms
            some sort of 3D object, such as a primitive. There are many ways to
            represent meshes; some of the most common are described in the data
            structures below:
           </p>

           <ul>
            <li>
             <em>raw format</em>: A list of faces. Each face is represented by
             a list of the vertices that make up that face. This is very
             simple, but uses lots of storage space due to the large number of
             duplicate vertices that are present.
            </li>

            <li>
             <em>indexed format</em>: This is nearly the same as raw format.
             The difference is that the verts are put into a separate list and
             all duplicates are removed. The list of the vertices that make up
             each face is replaced with a list of indices. This is much more
             compact.
            </li>

            <li>
             <em>winged-edge format</em>: A list of edges. This is a completely
             different structure and is much more useful during modeling than
             for creating primitives or storing meshes.
            </li>
           </ul>

           <h3>
            Vertex Order
           </h3>

           <p align="left">
            Another concept that you should know concerning the list of faces
            in the above formats is <em>vertex order</em>. In Wings, vertex
            order is couter-clockwise. This means that when you define a face,
            you must list the vertices (or indices) in couter-clockwise order.
            If listed in reverse, the face normal will point in the wrong
            direction. This can be corrected in Wings through the
            <em>invert</em> command, but should be avoided to begin with. It is
            extremely important (and necessary) to use a consistent order for
            all faces.
           </p>

           <h3>
            Erlang: A whole 'nother language
           </h3>

           <p align="left">
            Erlang is a very interesting programming language. It is different
            and may appear to be strange and difficult when compared to C or
            Python. In order for you to learn Erlang quickly and easily, you
            must do two things: forget any other language that you know, and
            change your way of thinking. These two rules are especially
            important when you attempt to write your first function.
           </p>

           <h3>
            Lists
           </h3>

           <p align="left">
            I won't explain every little detail about Erlang. (I don't fully
            understand all of it myself!) However, I will explain the
            <strong>one</strong> feature that is crucial to writing plugins:
            <em>lists</em>. For simple plugins, all you need to know is how to
            dynamically generate a list. That's it. The rest of the plugin code
            is just a copy &amp; paste operation with a few module/plugin name
            changes.
           </p>

           <p align="left"
              class="indent">
            For more advanced plugins, you may need to know how to traverse
            lists, access certain elements, create a dictionary from a list,
            and so on. My <em>meshtools</em> module has lots of functions that
            do these types of operations so feel free to use it. Also, check
            out Erlang's <em>lists</em> module; and read up on <em>list
            comprehensions</em>, which can take the place of nested <em>for
            loops</em>.
           </p>

           <h3>
            Erlang expressions
           </h3>

           <p align="left">
            The following table shows how some of these fundamental concepts
            are written as Erlang expressions.
           </p>

           <p>
            <br>
           </p>

           <div align="center">
            <center>
             <table border="0"
                    cellpadding="8"
                    cellspacing="1"
                    width="450"
                    bgcolor="#808080">
              <tr>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 a vertex is a tuple of 3 floats
                </p>
               </td>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 <span class="code">{-1.0, 1.0, 0.0}</span>
                </p>
               </td>
              </tr>

              <tr>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 a triangle is a list of 3 vertices<br>
                 (a list of 3 tuples)
                </p>
               </td>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 <span class="code">[{-1.0, 1.0, 0.0},<br>
                 {0.0, 1.0, 0.0},<br>
                 {1.0, 0.0, 0.0}]</span>
                </p>
               </td>
              </tr>

              <tr>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 rawtriangles is a list of triangles<br>
                 (a list of lists of 3 tuples)
                </p>
               </td>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 <span class="code">[[{-1.0, 1.0, 0.0},<br>
                 {0.0, 1.0, 0.0},<br>
                 {1.0, 0.0, 0.0}],<br>
                 [{-1.0, 0.0, -1.0},<br>
                 {0.0, 0.5, -1.0},<br>
                 {0.5, 0.0, 0.0}]]</span>
                </p>
               </td>
              </tr>

              <tr>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 a face is a list of indices
                </p>
               </td>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 <span class="code">[0, 1, 4]</span>
                </p>
               </td>
              </tr>

              <tr>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 faces is a list of faces<br>
                 (a list of lists of indices)
                </p>
               </td>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 <span class="code">[[0, 1, 4], [2, 5, 0], [1, 0, 7]]</span>
                </p>
               </td>
              </tr>
             </table>
            </center>
           </div>

           <h3>
            Erlang Functions
           </h3>

           <p align="left">
            The following function from my geodome plugin shows how to
            represent a tetrahedron as an Erlang function. It "generates" the
            verts and faces list, then simply returns both of them neatly
            packed up in a tuple.
           </p>

           <p>
            <br>
           </p>

           <div align="center">
            <center>
             <table border="0"
                    cellpadding="8"
                    cellspacing="1"
                    width="450"
                    bgcolor="#808080">
              <tr>
               <td bgcolor="#C0C0C0">
                <p align="left">
                 <span class="code">tetrahedron() -&gt;<br>
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A =
                 math:sqrt(1.0/8.0),<br>
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B =
                 math:sqrt(1.0/4.0),<br>
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C = 0.0,<br>
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Verts = [{C, A, B}, {C, A,
                 -B}, {-B, -A, C}, {B, -A, C}],<br>
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Faces = [[0, 1, 2], [0, 2,
                 3], [0, 3, 1], [1, 3, 2]],<br>
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Verts, Faces}.</span>
                </p>
               </td>
              </tr>
             </table>
            </center>
           </div>

           <p align="left"
              class="indent">
            <br>
           </p>

           <h3>
            Python to Erlang
           </h3>

           <p align="left">
            Let's see how simple it is to generate a <em>vertices list</em> and
            a <em>faces list</em> for a simple plane object with an arbitrary
            level of resolution. This type of primitive should be parallel to
            the floor, so let's arrange the vertices on the <em>xz-plane</em>;
            all <em>y-coordinates</em>, therefore, must be set to zero. The
            following table compares Python code to Erlang code:
           </p>

           <p>
            <br>
           </p>

           <div align="center">
            <center>
             <table border="0"
                    cellpadding="8"
                    cellspacing="1"
                    width="450"
                    bgcolor="#808080">
              <tr>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left"
                   class="center">
                 Python
                </p>
               </td>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left"
                   class="center">
                 Erlang
                </p>
               </td>
              </tr>

              <tr>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 <span class="code"><span class="prompt">&gt;&gt;&gt;</span>
                 range(6)<br>
                 <span class="output">[0, 1, 2, 3, 4, 5]</span></span>
                </p>
               </td>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 <span class="code"><span class="prompt">1&gt;</span>
                 lists:seq(0,5).<br>
                 <span class="output">[0,1,2,3,4,5]</span></span>
                </p>
               </td>
              </tr>

              <tr>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 <span class="code"><span class="prompt">&gt;&gt;&gt;</span> u
                 = 3<br>
                 <span class="prompt">&gt;&gt;&gt;</span> v = 2<br>
                 <span class="prompt">&gt;&gt;&gt;</span> verts = [(i,0,j)
                 \<br>
                 <span class="prompt">...</span> for i in range(u) \<br>
                 <span class="prompt">...</span> for j in range(v)]<br>
                 <span class="prompt">&gt;&gt;&gt;</span> verts<br>
                 <span class="output">[(0, 0, 0),<br>
                 (0, 0, 1),<br>
                 (1, 0, 0),<br>
                 (1, 0, 1),<br>
                 (2, 0, 0),<br>
                 (2, 0, 1)]</span></span>
                </p>
               </td>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 <span class="code"><span class="prompt">2&gt;</span> U =
                 3,<br>
                 <span class="prompt">2&gt;</span> V = 2,<br>
                 <span class="prompt">2&gt;</span> Verts = [{I,0,J} ||<br>
                 <span class="prompt">2&gt;</span> I &lt;- lists:seq(0,
                 U-1),<br>
                 <span class="prompt">2&gt;</span> J &lt;- lists:seq(0,
                 V-1)],<br>
                 <span class="prompt">2&gt;</span> Verts.<br>
                 <span class="output">[{0,0,0},<br>
                 {0,0,1},<br>
                 {1,0,0},<br>
                 {1,0,1},<br>
                 {2,0,0},<br>
                 {2,0,1}]</span></span>
                </p>
               </td>
              </tr>

              <tr>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 <span class="code"><span class="prompt">&gt;&gt;&gt;</span>
                 faces = [[i*v+j, \<br>
                 <span class="prompt">...</span> i*v+j+1, \<br>
                 <span class="prompt">...</span> (i+1)*v+j+1, \<br>
                 <span class="prompt">...</span> (i+1)*v+j] \<br>
                 <span class="prompt">...</span> for i in range(u-1) \<br>
                 <span class="prompt">...</span> for j in range (v-1)]<br>
                 <span class="prompt">&gt;&gt;&gt;</span> faces<br>
                 <span class="output">[[0, 1, 3, 2], [2, 3, 5,
                 4]]</span></span>
                </p>
               </td>
               <td valign="top"
                   bgcolor="#C0C0C0">
                <p align="left">
                 <span class="code"><span class="prompt">3&gt;</span> Faces =
                 [[I*V+J,<br>
                 <span class="prompt">3&gt;</span> I*V+J+1,<br>
                 <span class="prompt">3&gt;</span> (I+1)*V+J+1,<br>
                 <span class="prompt">3&gt;</span> (I+1)*V+J] ||<br>
                 <span class="prompt">3&gt;</span> I &lt;- lists:seq(0,
                 U-2),<br>
                 <span class="prompt">3&gt;</span> J &lt;- lists:seq(0,
                 V-2)],<br>
                 <span class="prompt">3&gt;</span> Faces.<br>
                 <span class="output">[[0,1,3,2],[2,3,5,4]]</span></span>
                </p>
               </td>
              </tr>
             </table>
            </center>
           </div>

           <p>
            <br>
           </p>

           <p align="left"
              class="indent">
            When it comes to list comprehensions, Python and Erlang are nearly
            identical. The only thing to be aware of is one-off errors. Compare
            Python's <em>range()</em> to Erlang's <em>lists:seq()</em>. Start
            up the Erlang Shell and paste some of the above code (in blue) to
            experiment for yourself.
           </p>

           <p align="left"
              class="indent">
            <a href="misc/tut-wings-plugin-figure-1.gif"
               class="highslide"
               onclick="return hs.expand(this)">Figure 1</a> illustrates how
               the plane object would appear in the geometry window. The vertex
               indices are denoted in light blue; the face indices in light
               red. The concept of counter-clockwise vertex order should now be
               quite apparent. Note: The code fragment above produces an
               invalid mesh and will crash in current versions of Wings. The
               reason is that only one edge is shared by two faces, the other 6
               edges are open.
           </p>

           <h3>
            Winged Edge Data Structure
           </h3>

           <p align="left">
            Keep in mind that Wings will <strong>attempt</strong> to build a
            winged edge data structure from your <em>verts</em> and
            <em>faces</em> lists. This does not always work for every type of
            input mesh. The following conditions should be avoided from the
            start because they will surely make your plugin crash:
           </p>

           <ul>
            <li>duplicate vertices
            </li>

            <li>each edge is not shared by exactly two faces
            </li>

            <li>inconsistent vertex-order
            </li>

            <li>missing faces or holes
            </li>

            <li>less than 3 vertices in any face
            </li>
           </ul>

           <p>
            Another thing to watch out for is floating-point round-off error. A
            vertex might print out as <span class="code">{1.0, 0.0, 0.1}</span>
            but might actually be represented internally as <span class=
            "code">{1.0, 0.0, 0.099999999}</span>. Keep this in mind when
            something goes wrong and you can't figure out what it is.
           </p>

           <h3>
            Links
           </h3>

           <p align="left">
            You should get a text editor with color syntax-highlighting to make
            Erlang easier to read. I highly recommend the <a href=
            "http://www.geocities.com/jadoxa/tde/"
               target="_blank">Thomson-Davis Editor</a>; here's a <a href=
               "misc/tde-syntax-highlighting.gif"
               class="highslide"
               onclick="return hs.expand(this)">screenshot</a>. For more about
               Erlang, read the tutorial by <a href="tut-earlyriser.htm"
               target="_blank">Sean Hinde</a>. Click on the INFO link at the
               top of this page and check out the source of my plugins. And
               don't keep an eye out for my upcoming book: <a href=
               "misc/Inside-Wings3D-Plugins.gif"
               class="highslide"
               onclick="return hs.expand(this)"><em>Inside Wings3D Plugins: A
               Developer's Guide.</em></a>
           </p>

           <h3>
            Conclusion
           </h3>

           <p align="left">
            Well, this is not the end because there is still so much that
            hasn't been covered. However, all of my plugins were written based
            on the few techniques and concepts presented here. I have tried to
            be as comprehensive as possible and this tutorial should give you a
            great head start on your journey to plugin writing. For other
            information about interactivity with the erlang shell, see my other
            tutorial: <a href="tut-wings-shell.htm">Exploring Wings3D through
            the Erlang Shell</a>.
           </p>
          </td>
         </tr>
        </table>
       </center>
      </div>

      <hr size="1"
          width="500">

      <div align="center">
       <center>
        <table border="0">
         <tr>
          <td width="500"
              bgcolor="#C0C0C0">
           <p align="center"
              class="center">
            This page was last revised on April 1, 2004<br>
            Copyright <!--webbot bot="HTMLMarkup" startspan -->&#169; 
            <!--webbot bot="HTMLMarkup" endspan --> 2004 Anthony D'Agostino<br>
            All rights reserved.<br>
            <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
               codebase=
               "http://active.macromedia.com/flash4/cabs/swflash.cab#version=4,0,0,0"
               id="spyder"
               width="45"
               height="26">
             <param name="movie"
                value="misc/spyder.swf">
             <param name="quality"
                value="high">
             <param name="bgcolor"
                value="#C0C0C0">
             <param name="wmode"
                value="transparent">
             <embed name="spyder"
                wmode="transparent"
                src="misc/spyder.swf"
                quality="high"
                bgcolor="#C0C0C0"
                width="45"
                height="26"
                type="application/x-shockwave-flash"
                pluginspage=
                "http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash">
            </object>
           </p>
          </td>
         </tr>
        </table>
       </center>
      </div>

      <p align="left">
       <script language="JavaScript"
          src="popup.js"
          type="text/javascript">
</script> <script language="JavaScript"
          src="highslide/highslide.js"
          type="text/javascript">
</script><script type="text/javascript">
hs.outlineType = 'rounded-white'; hs.creditsText = ''; hs.dimmingOpacity = 0.75;
       </script>
      </p>
     </td>
    </tr>
   </table>
  </div>
 </body>
</html>
